import { GoogleGenAI, GenerateContentResponse, Type } from "@google/genai";
import { GEMINI_MODEL_NAME, IMAGEN_MODEL_NAME, STORYLINE_SYSTEM_PROMPT_BASE, IMAGE_PROMPT_PREFIX, SCENE_BREAKDOWN_SYSTEM_PROMPT, CHARACTER_PROFILE_SYSTEM_PROMPT, MOOD_BOARD_PROMPT_SYSTEM_INSTRUCTION } from '../constants';
import { Scene, CharacterProfile, MoodBoardImage } from "../types";

if (!process.env.API_KEY) {
  throw new Error("API_KEY environment variable not set. Please ensure it is configured.");
}

const ai = new GoogleGenAI({ apiKey: process.env.API_KEY });

/**
 * Extracts the appearance description from a character profile markdown text.
 * @param profileText The full markdown text of the character profile.
 * @returns The extracted appearance description, or a fallback string.
 */
export const extractAppearance = (profileText: string): string => {
  const appearanceMatch = profileText.match(/(\*\*Appearance\*\*|Appearance:)([\s\S]*?)(?=\*\*Backstory\*\*|Backstory:|\*\*Motivations\*\*|Motivations:|\*\*Fears\*\*|Fears:|$)/i);
  return appearanceMatch ? appearanceMatch[2].trim() : "A character based on the profile.";
};

export const generateStoryline = async (userInput: string, styleInstruction: string): Promise<string> => {
  try {
    const fullSystemInstruction = `${STORYLINE_SYSTEM_PROMPT_BASE}\n\nSTYLE INSTRUCTION:\n${styleInstruction}`;
    const response: GenerateContentResponse = await ai.models.generateContent({
      model: GEMINI_MODEL_NAME,
      contents: userInput,
      config: {
        systemInstruction: fullSystemInstruction,
        temperature: 0.7, // Add some creativity
        topP: 0.95,
        topK: 40,
      }
    });
    return response.text;
  } catch (error) {
    console.error("Error generating storyline:", error);
    if (error instanceof Error) {
      throw new Error(`Failed to generate storyline: ${error.message}`);
    }
    throw new Error("Failed to generate storyline due to an unknown error.");
  }
};

export const generateImageFromPrompt = async (prompt: string): Promise<string> => {
  try {
    const fullPrompt = `${IMAGE_PROMPT_PREFIX}${prompt}`;
    const response = await ai.models.generateImages({
      model: IMAGEN_MODEL_NAME,
      prompt: fullPrompt,
      config: { 
        numberOfImages: 1, 
        outputMimeType: 'image/jpeg', // Using JPEG for potentially smaller file sizes
        aspectRatio: "16:9" // Cinematic aspect ratio
      },
    });

    if (response.generatedImages && response.generatedImages.length > 0) {
      const base64ImageBytes: string = response.generatedImages[0].image.imageBytes;
      return `data:image/jpeg;base64,${base64ImageBytes}`;
    } else {
      throw new Error("No image generated by the API.");
    }
  } catch (error) {
    console.error("Error generating image:", error);
     if (error instanceof Error) {
      throw new Error(`Failed to generate image: ${error.message}`);
    }
    throw new Error("Failed to generate image due to an unknown error.");
  }
};

export const generateSceneBreakdown = async (storyline: string): Promise<Scene[]> => {
  try {
    const response: GenerateContentResponse = await ai.models.generateContent({
      model: GEMINI_MODEL_NAME,
      contents: storyline,
      config: {
        systemInstruction: SCENE_BREAKDOWN_SYSTEM_PROMPT,
        responseMimeType: "application/json",
        responseSchema: {
          type: Type.ARRAY,
          items: {
            type: Type.OBJECT,
            properties: {
              sceneNumber: { type: Type.INTEGER, description: "Sequential scene number" },
              location: { type: Type.STRING, description: "Scene location heading" },
              characters: {
                type: Type.ARRAY,
                items: { type: Type.STRING },
                description: "Characters in the scene"
              },
              summary: { type: Type.STRING, description: "Summary of scene action" },
            },
            required: ["sceneNumber", "location", "characters", "summary"],
          },
        },
      }
    });

    const jsonText = response.text.trim();
    const scenes: Scene[] = JSON.parse(jsonText);
    return scenes;

  } catch (error) {
    console.error("Error generating scene breakdown:", error);
    if (error instanceof Error) {
      throw new Error(`Failed to generate scene breakdown: ${error.message}`);
    }
    throw new Error("Failed to generate scene breakdown due to an unknown error.");
  }
};

export const generateCharacterProfile = async (userInput: string): Promise<CharacterProfile> => {
  try {
    // 1. Generate the text profile
    const textResponse: GenerateContentResponse = await ai.models.generateContent({
      model: GEMINI_MODEL_NAME,
      contents: userInput,
      config: {
        systemInstruction: CHARACTER_PROFILE_SYSTEM_PROMPT,
        temperature: 0.8, // A bit more creative for characters
        topP: 0.95,
        topK: 40,
      }
    });
    const profileText = textResponse.text;

    // 2. Extract appearance and generate an image
    const appearanceDescription = extractAppearance(profileText);
    if (!appearanceDescription || appearanceDescription.includes("based on the profile")) {
        console.warn("Could not extract a detailed appearance from the profile. Using a generic prompt.");
    }
    
    // Create a specific prompt for a character portrait
    const imagePromptForCharacter = `Cinematic, photorealistic portrait of a character. ${appearanceDescription}`;
    
    // Generate the image using the existing image generation function
    // Note: The service will prepend its own cinematic prefix.
    const imageUrl = await generateImageFromPrompt(imagePromptForCharacter);
    
    return { text: profileText, imageUrl };

  } catch (error) {
    console.error("Error generating character profile:", error);
    if (error instanceof Error) {
      throw new Error(`Failed to generate character profile: ${error.message}`);
    }
    throw new Error("Failed to generate character profile due to an unknown error.");
  }
};

export const generateMoodBoard = async (storyline: string): Promise<MoodBoardImage[]> => {
  try {
    // Step 1: Generate a set of descriptive prompts from the storyline
    const promptsResponse: GenerateContentResponse = await ai.models.generateContent({
      model: GEMINI_MODEL_NAME,
      contents: storyline,
      config: {
        systemInstruction: MOOD_BOARD_PROMPT_SYSTEM_INSTRUCTION,
        responseMimeType: "application/json",
        responseSchema: {
          type: Type.ARRAY,
          items: { type: Type.STRING },
        },
      }
    });

    const imagePrompts: string[] = JSON.parse(promptsResponse.text.trim());

    if (!Array.isArray(imagePrompts) || imagePrompts.length === 0) {
      throw new Error("AI failed to generate valid prompts for the mood board.");
    }

    // Step 2: Generate an image for each prompt in parallel
    const imagePromises = imagePrompts.map(prompt => 
      generateImageFromPrompt(prompt).then(url => ({
        id: `${Date.now()}-${Math.random()}`,
        url,
        prompt,
      }))
    );
    
    const images = await Promise.all(imagePromises);

    return images;

  } catch (error) {
    console.error("Error generating mood board:", error);
    if (error instanceof Error) {
      throw new Error(`Failed to generate mood board: ${error.message}`);
    }
    throw new Error("Failed to generate mood board due to an unknown error.");
  }
};